
###################################################
3-4 계약 개발
###################################################
3.4.1 Solidity 데이터 형식
###################################################

DataTypeSample.sol

pragma solidity ^0.4.8;

contract DataTypeSample {
    function getValueType() constant returns (uint) {
        uint a;     // Uint형 변수 a를 선언. 이 시점에서 a는 0으로 초기화된다.
        a = 1;      // a의 값이 1이 된다.
        uint b = a; // 변수 a에 a의 값 1이 대입
        b = 2;      // b의 값이 2가 된다.
        
        return a;   // a의의 값인 1이 반환
    }
    
    function getReferenceType() constant returns (uint[2]) {
        uint[2] a;  // uint 형식을 가진 배열 변수 a를 선언 
        a[0] = 1;   // 배열의 첫 번째 요소의 값에 1을 대입
        a[1] = 2;   // 배열의 두 번째 요소의 값에 2을 대입
        uint[2] b = a;  // unit 형식을 가진 배열 변수 b를 선언하고 a를 b에 대입. a는 데이터 영역 주소이기 때문에 b는 a와 동일한 데이터 영역을 참조함
        b[0] = 10;  // b와 a는 같은 데이터 영역을 참조하기 때문에 a[0]도 10이 된다.
        b[1] = 20;  // 마찬가지로 a[1]도 20이 된다
        
        return a;   // 10, 20이 반환된다.
    }
}


IntSample.sol

pragma solidity ^0.4.8;

contract IntSample {
    function division() constant returns (uint) {
        uint a = 3;
        uint b = 2;
        uint c = a / b * 10;    // a / b의 결과는 1이다
        return c;               // 10이 반환된다
    }
    function divisionLiterals() constant returns (uint) {
        uint c = 3 / 2 * 10;    // 상수이기 때문에 a / b가 1.5가 된다
        return c;               // 15가 반환된다
    }
    function divisionByZero() constant returns (uint) {
        uint a = 3;             
        uint c = a / 0;         // 컴파일은 되지만 예외 발생
        return c;               // uint c = 3 / 0으로 하면 컴파일도 진행되지 않는다
    }
    function shift() constant returns (uint[2]) {
        uint[2] a;
        a[0] = 16 << 2;         // 16 * 2 ** 2 = 64
        a[1] = 16 >> 2;         // 16 / 2 ** 2 = 4
        return a;               // 64, 4가 반환된다.
    }
}




