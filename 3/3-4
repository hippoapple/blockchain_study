
###################################################
3-4 계약 개발
###################################################
3.4.1 Solidity 데이터 형식
###################################################


###################################################
DataTypeSample.sol
###################################################

pragma solidity ^0.4.8;

contract DataTypeSample {
    function getValueType() constant returns (uint) {
        uint a;     // Uint형 변수 a를 선언. 이 시점에서 a는 0으로 초기화된다.
        a = 1;      // a의 값이 1이 된다.
        uint b = a; // 변수 a에 a의 값 1이 대입
        b = 2;      // b의 값이 2가 된다.
        
        return a;   // a의의 값인 1이 반환
    }
    
    function getReferenceType() constant returns (uint[2]) {
        uint[2] a;  // uint 형식을 가진 배열 변수 a를 선언 
        a[0] = 1;   // 배열의 첫 번째 요소의 값에 1을 대입
        a[1] = 2;   // 배열의 두 번째 요소의 값에 2을 대입
        uint[2] b = a;  // unit 형식을 가진 배열 변수 b를 선언하고 a를 b에 대입. a는 데이터 영역 주소이기 때문에 b는 a와 동일한 데이터 영역을 참조함
        b[0] = 10;  // b와 a는 같은 데이터 영역을 참조하기 때문에 a[0]도 10이 된다.
        b[1] = 20;  // 마찬가지로 a[1]도 20이 된다
        
        return a;   // 10, 20이 반환된다.
    }
}

###################################################
IntSample.sol
###################################################

pragma solidity ^0.4.8;

contract IntSample {
    function division() constant returns (uint) {
        uint a = 3;
        uint b = 2;
        uint c = a / b * 10;    // a / b의 결과는 1이다
        return c;               // 10이 반환된다
    }
    function divisionLiterals() constant returns (uint) {
        uint c = 3 / 2 * 10;    // 상수이기 때문에 a / b가 1.5가 된다
        return c;               // 15가 반환된다
    }
    function divisionByZero() constant returns (uint) {
        uint a = 3;             
        uint c = a / 0;         // 컴파일은 되지만 예외 발생
        return c;               // uint c = 3 / 0으로 하면 컴파일도 진행되지 않는다
    }
    function shift() constant returns (uint[2]) {
        uint[2] a;
        a[0] = 16 << 2;         // 16 * 2 ** 2 = 64
        a[1] = 16 >> 2;         // 16 / 2 ** 2 = 4
        return a;               // 64, 4가 반환된다.
    }
}

###################################################
AddressSample.sol
###################################################

pragma solidity ^0.4.8;

contract AddressSample {
    // 이름 없는 함수(송금되면 실행된다) payable을 지정해 ether를 받는 것이 가능
    function () payable {}
    function getBalance(address _target) constant returns (uint) {
        if (_target == address(0)) {    // _target이 0인 경우 계약 자신의 주소를 할당
            _target = this;
        }
        return _target.balance;     // 잔고 반환
    }
    
    // 이후, 송금 메서드를 실행하기 전 이 계약에 대해 송금해둬야 한다
    // 인수로 지정된 주소에 transfer를 사용해 송금
    function send(address _to, uint _amount) {
        if (!_to.send(_amount)) {   // send를 사용할 경우 반환 값을 체크해야 한다
            throw;
        }
    }
    
    // 인수로 기정된 주소에 call을 사용해 송금
    function call(address _to, uint _amount) {
        if(!_to.call.value(_amount).gas(1000000)()) {   // call도 반환값을 체크해야 한다
            throw;  // 다음 팁 참고
        }
    }
    
    // 인출 패턴(transfer)
    function withdraw() {  
        address to = msg.sender;    // 메서드 실행자를 받는 사람으로 한다
        to.transfer(this.balance);  // 전액 송금한다
    }
    
    // 인출 패턴(call)
    function withdraw2() {
        address to = msg.sender;    // 메서드 실행자를 받는 사람으로 한다
        if(!to.call.value(this.balance).gas(1000000)()) {   // 전액 송금한다
            throw;
        }
    }
}



###################################################
ArraySample.sol
###################################################

pragma solidity ^0.4.8;

contract ArraySample {
    uint[5] public fArray = [uint(10), 20, 30, 40, 50];     // 고정 길이 배열의 선언 및 초기화
    uint[] public dArray;   // 가변 길이 배열 선언
    function getFixedArray() constant returns (uint[5]) {
        uint[5] storage a = fArray;     // 길이가 5인 고정 배열을 선언
        // 메서드 안에서는 이 형식으로 초기화 할 수 없다
        // uint[5] b = [uint(1), 2, 3, 4, 5]
        for (uint i = 0; i < a.length; i++){    // 초기화
            a[i] = i + 1;
        }
        return a;   //  [1, 2, 3, 4, 5] 반환
    }
    function getFixedArray2() constant returns (uint[5]) {
        uint[5] storage b = fArray; // 상태 변수로 초기화
        return b;                   // [10, 20, 30, 40. 50] 반환
    }
    function pushFixedArray(uint x) constant returns (uint) {
    // 다음은 컴파일 오류가 발생
    // fArray.push(x);
        return fArray.length;
    }
    function pushDArray(uint x) returns (uint) {
        return dArray.push(x);  // 인수로 받은 요소를 추가하고 변경 후의 배열 길이를 반환
    }
    function pushDArrayLength() returns (uint) {
        return dArray.length;   // 가변 길이 배열의 현재 크기를 반환
    }
    function initDArray(uint len) {
        dArray.length = len;    // 가변 길이 배열의 크기를 변경
        for (uint i = 0; i < len; i++){ // 초기화
            dArray[i] = i + 1;
        }
    }
    function getDArray() constant returns (uint[]) {
        return dArray;  // 가변 길이 배열도 반환
    }
    function delDArray() returns (uint) {
        delete dArray;          // 가변 길이 배열 삭제
        return dArray.length;   // 0을 반환
    }
    function delFArray() returns (uint) {
        delete fArray;          // 고정 길이 배열 삭제. 각 요소는 0이 된다
        return fArray.length;   // 길이는 변하지 않기 때문에 5를 반환
    }
}


###################################################
StructSample.sol
###################################################

pragma solidity ^0.4.8;

contract StructSample {
    struct User {       // 구조체 선언 (c 언어와 동일)
        address addr;
        string name;
    }
    User[] public userList; // 구조체의 배열도 선언할 수 있다
    function addUser(string _name) returns (uint) { // 사용자 추가
        uint id = userList.push(User({              // 배열의 가장 마지막에 추가한다
            addr : msg.sender ,
            name : _name
        }));
        return (id - 1);
    }
    function addUser2(string _name) returns (uint) {    // 사용자 추가
        userList.length += 1;                           // 배열의 길이를 1만큼 증가시킨다
        uint id = userList.length - 1;      
        userList[id].addr = msg.sender;
        userList[id].name = _name;
        return id;
    }
    function editUser(uint _id, string _name){
        if(userList.length <= _id || userList[_id].addr != msg.sender){ // id가 배열의 길이 이상, 주소가 등록된 것과 다르다
            throw;  // 예외 처리
        }
        userList[_id].name = _name;
    }
    // 구조체는 직접 반환하지 않기 때문에 다음 메서드는 컴파일 오류가 발생한다
    // function getUser(uint _id) constant returns (Users){
    //      return userList[_id];
    // }
    // 아래 메서드는 문제 없음
    function getUser(uint _id) constant returns (address, string) {
        return (userList[_id].addr, userList[_id].name);
    }
}



###################################################
MappingSample.sol
###################################################

pragma solidity ^0.4.8;

contract MappingSample {
    struct User {
        string name;
        uint age;
    }
    mapping(address=>User) public userList;     // value를 구조체(User)로 설정
    function setUser(string _name, uint _age) {
        userList[msg.sender].name = _name;      // key를 지정해 접근한다
        userList[msg.sender].age  = _age;
    }
    function getUser() returns (string, uint){
        User storage u = userList[msg.sender];
        return (u.name, u.age);
    }
}

Ether 단위
###################################################
EtherUnitSample.sol
###################################################

pragma solidity ^0.4.8;

contract EtherUnitSample {
    function () payable {}  // Ether를 받는 메서드
    // getEther 실행 전에 이 계약에 1 ether를 송금해야 한다
    function getEther() constant returns (uint _wei, uint _szabo, uint _finney, uint _ether) {
        uint amount = this.balance;     
        _wei = amount / 1 wei;
        _szabo = _wei / 1 szabo;
        _finney = _wei / 1 finney;
        _ether = _wei / 1 ether;
    }
}



시간 단위
###################################################
TimeUnitSample.sol
###################################################

pragma solidity ^0.4.8;

contract TimeUnitSample {
    uint public startTime;
    
    function start(){
        startTime = now;    // now는 block.timestamp의 별칭
    }
    // 시작 시간으로부터 지정한 '분'만큼 경과했는지 확인(bool 형태로 반환)
    function minutesAfter(uint min) constant returns (bool) {
        if (startTime == 0) return false;   // 시작 전에는 false를 반환
        return ((now - startTime) / 1 minutes >= min);
    }
    // 경과한 '초'를 반환
    function getSeconds() constant returns (uint) {
        if (startTime == 0) return 0;   // 시작 전에는 0을 반환
        return (now - startTime);
    }
}









