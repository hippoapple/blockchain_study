
#########################
HelloWorldOrg.sol
#########################

pragma solidity ^0.4.8;   /* 버전 프라그마 */

contract HelloWorld {     /* 계약 선언 */
        string public greeting; /* 상태 변수 선언 */

        function HelloWorld(string _greeting){  /* 생성자 */
                greeting = _greeting;
        }
        function setGreeting(string _greeting){ /* 메서드 선언 */
                greeting = _greeting;
        }
        function say() contract return(string){ /* 메서드 선언 */
                return greeting;
        }
}

#########################
HelloWorldOrg.sol
#########################

tr명령어로 줄바꿈을 모두 제거
$ cat HelloWorldOrg.sol | tr -d '\n' > HelloWorld.sol

$ cat HelloWorld.sol

pragma solidity ^0.4.8;contract HelloWorld {string public greeting;	function HelloWorld(string _greeting){greeting = _greeting;}function setGreeting(string _greeting){greeting = _greeting;}function say() contract return(string){retrun greeting;}}

내용을 복사

접속 후

> source = '복사한 내용'

> source = 'pragma solidity ^0.4.8;contract HelloWorld {    string public greeting;    function HelloWorld(string _greeting){        greeting = _greeting;    }    function setGreeting(string _greeting){        greeting = _greeting;    }    function say() constant returns(string){        return greeting;    }}'

소스를 컴파일
> sourceCompiled = eth.compile.solidity(source)

ABI 정보를 얻어옴.
ABI(Application Binary Interface) 계약의 외부 사양. 메서드와 인수, 반환값에 대한 정보
> contractAbiDefinition = sourceCompiled['/var/folders/qh/sfkvr02571z65xc_84jwg2300000gn/T/geth-compile-solidity826908631:HelloWorld'].info.abiDefinition

ABI로부터 계약 객체를 만든다
> sourceCompiledContract = eth.contract(contractAbiDefinition)

contract에 정의된 전달해야할 내용을 생성
> _greeting = "Hello, World!~"

계좌 unlock
> personal.unlockAccount(eth.accounts[0], "pass0", 0)

배포 작업
> contract = sourceCompiledContract.new(_greeting, {from:eth.accounts[0], data:sourceCompiled['/var/folders/qh/sfkvr02571z65xc_84jwg2300000gn/T/geth-compile-solidity826908631:HelloWorld'].code, gas:'4700000'})

블록체인 대기중인 transactions 확인
> eth.pendingTransactions

> miner.start(1)

> eth.pendingTransactions

> miner.stop()

> eth.pendingTransactions
없는 것을 볼 수 있다.

> contract
address : undefined에서 해쉬 값으로 변경 된 것을 볼 수 있다.


###############################################################
3.2.5 계약 동작시키기
###############################################################

이더리움에서 메서드를 실행하는 방법
sendTransaction : send
call            : get

> contract.say.call()
say functions을 호출. contract가 저장하고 있는 문자열이 반환

> contract.greeting.call()
변수 호출

Hello ethereum으로 greeting 변경
> contract.setGreeting.sendTransaction("Hello ethereum!", {from:eth.accounts[0], gas:1000000})

> eth.pendingTransactions

> miner.start(1)

> eth.pendingTransactions

> miner.stop()




###############################################################
3.2.6 기존 계약에 접근
###############################################################

터미널을 하나 추가하여 기존 contract에 접근해보자

접속
$ geth attach rpc:http://localhost:8545

source 등록
> source = 'pragma solidity ^0.4.8;contract HelloWorld {    string public greeting;    function HelloWorld(string _greeting){        greeting = _greeting;    }    function setGreeting(string _greeting){        greeting = _greeting;    }    function say() constant returns(string){        return greeting;    }}'

컴파일
> sourceCompiled = eth.compile.solidity(source)

ABI정보를 가져옴
> contractAbiDefinition = sourceCompiled['(sourceCompiled의 첫번째 줄에 나온 주소)'].info.abiDefinition

contract 접근
> contract = eth.contract(contractAbiDefinition).at("(contract의 address)")

contract function 호출
> contract.say.call()
"Hello, Ethereum" 출력



