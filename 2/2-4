# 테스트 네트워크에서 ether 송금

EOA(Extenally Owned Account) 일반 사용자가 사용하는 계정

> personal

pass0으로 계좌 생성
> personal.newAccount("pass0")

> eth
> eth.accounts

pass1으로 계좌 생성
> personal.newAccount("pass1")

> eth.accounts[0]
> eth.accounts[1]

종료
> exit

geth 프로세스 동작하는지 여부 확인
$ ps -eaf | grep geth

geth 명령어를 통해 pass2 생성
$ geth --datadir /Users/jihwan/data_testnet account new
pass2

geth 명령어로 account 확인
$ geth --datadir /Users/jihwan/data_testnet account list

tree로 확인
$ tree data_testnet


###########################################################
2.4.2 채굴 (miner)
###########################################################

$ geth --networkid 4649 --nodiscover --maxpeers 0 --datadir /Users/jihwan/data_testnet console 2>> /Users/jihwan/data_testnet/geth.log

채굴에 성공했을때 보상 받는 계정 Etherbase
defalut는 eth.account[0]

Etherbase 확인
> eth.coinbase

Etherbase 변경
> miner.setEtherbase(eth.accounts[1])

Etherbase 확인
> eth.coinbase

잔고 확인
> eth.getBalance(eth.accounts[0])
> eth.getBalance(eth.accounts[1])
> eth.getBalance(eth.accounts[2])

블록 수
> eth.blockNumber

채굴, mining  miner.start(thread_num) 채굴할 때 사용할 스레드 수
> miner.start(1)

> miner.stop()
> exit

log 파일 확인
$ tail -f ~/data_testnet/geth.log

DAG(Directed Acyclic Graph) 파일명 확인
$ tree .ethash/

DAG 파일 확인
$ ls -lh .ethash/full-R23-0000000000000000

채굴 여부
> eth.mining

해쉬 속도
> eth.hashrate

블록 길이
> eth.blockNumber

잔고 확인
> eth.getBalance(eth.coinbase)

wei를 ether로 변환
> web3.fromWei(eth.getBalance(eth.accounts[0]),"ether")


###########################################################
2.4.3 Ether 송금
###########################################################

> eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], values:web3.toWei(10, "ether")})
error
트랜잭션의 발행은 유료(from이 부담)이기 때문에 잘못된 실행을 방지하기 위해 언제나 잠금 상태
잠금 상태를 해제하여야 한다.

> personal.unlockAccount(eth.accounts[0])
or
> personal.unlockAccount(eth.accounts[0], "pass0")
300초만 유지 된다
> personal.unlockAccount(eth.accounts[0], "pass0", 0)
종료 될 때까지 유지 된다

다시 전송
> eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], values:web3.toWei(10, "ether")})

잔고 확인
> eth.getBalance(eth.accounts[1])

트랜잭션 확인
> eth.getTransaction("(전송에서 발생한 트랜잭션)")

blockNumber : null 
null의 의미는 블록체인에 포함되지 않았다.
즉 mining이 되지 않았다를 의미한다.

> eth.pendingtransactions
체류 중인 트랜잭션을 표시한다

> miner.start(1)

> eth.pendingTransactions
[]
채굴로 인해 체류 중인 트랜잭션이 없어짐

> miner.stop()

> eth.blockNumber


###########################################################
2.4.4 트랜잭션 수수료
###########################################################

> personal.unlockAccount(eth.accounts[1], "pass1", 0)
계좌 unlock

> eth.sendTransaction({from:eth.accounts[1], to:eth.accounts[2], value:web3.toWei(5, "ether")})
계좌1에서 계좌2에 5ether 송금

> miner.start(1)

> eth.pendingTransactions

> miner.stop()

> eth.blockNumber

송금이 완료 했으니 eth.accounts[2]잔고 확인
> eth.getBalance(eth.accounts[2])
> web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")

송금자 eth.accounts[1] 확인
> eth.getBalance(eth.accounts[1])
> web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
계좌1잔고 = 전체 - 송금액 - 수수료

> eth.getBalnce(eth.accounts[0])
> web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
계좌0잔고 = 계좌0잔고 + 수수료(채굴비용)

> eth.getTransaction("(송금할때 발생한 트랜잭션)")
gas : 지불 가능한 최대 gas
gasPrice : 1Gas의 가격 (wei/Gas)

지불한 수수료[Wei] / gasPrice [Wei/Gas] = 420,000,000,000,000 / 20,000,000,000 = 21,000 Gas



###########################################################
2.4.5 백그라운드로 Geth 기동
###########################################################





