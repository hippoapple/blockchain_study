
pragma solidity ^0.4.8;

// 본인 확인 계약
contract PersonCertification {
    
	// 계약 관리자 주소
    address admin;

    // (1) 열람 허가 정보
    struct AppDetail {
        bool allowReference;
        uint256 approveBlockNo;
        uint256 refLimitBlockNo;
        address applicant;
    }
    
	// (2) 본인 확인 정보(홍길동)
    struct PersonDetail {
        string name;
        string birth;
        address[] orglist;
    }
    
	// (3) 인증 기관 정보 (학교, 회사 등)
    struct OrganizationDetail {
        string name;
    }
    
	// (4) 해당 키의 열람 허가 정보
    mapping(address => AppDetail) appDetail;
    
	// (5) 해당 키의 본인 확인 정보
    mapping(address => PersonDetail) personDetail;
    
	// (6) 해당 키의 조직 정보
    mapping(address => OrganizationDetail) public orgDetail;
    
	// (7) 생성자
    function PersonCertification() {
        admin = msg.sender;
    }
    
	// —————————————————————————
	// 데이터 등록 기관(set)
	// —————————————————————————
	// (8) 본인 정보를 등록
    function setPerson(string _name, string _birth) {
        personDetail[msg.sender].name  = _name;
        personDetail[msg.sender].birth = _birth;
    }
    
	// (9) 조직 정보를 등록
    function setOrganization(string _name) {
        orgDetail[msg.sender].name = _name;
    }
    
	// (10) 조직이 개인의 소속을 증명
    function setBelong(address _person) {
        personDetail[_person].orglist.push(msg.sender);
    }
    
	// (11) 본인 확인 정보 참조를 허가
    function setApprove(address _applicant, uint256 _span) {
        appDetail[msg.sender].allowReference = true;
        appDetail[msg.sender].approveBlockNo = block.number;
        appDetail[msg.sender].refLimitBlockNo = block.number + _span;
        appDetail[msg.sender].applicant = _applicant;
    }
    
	// —————————————————————————
	// 데이터 취득 함수 (get)
	// —————————————————————————
	// (12) 본인 확인 정보를 참조
    function getPerson(address _person) public constant returns (
                                        bool _allowReference,
                                        uint256 _approveBlockNo,
                                        uint256 _refLimitBlockNo,
                                        address _applicant,
                                        string _name,
                                        string _birth,
                                        address[] _orglist) {
        
	// (12-1) 열람을 허가할 정보
        _allowReference     = appDetail[_person].allowReference;
        _approveBlockNo     = appDetail[_person].approveBlockNo;
        _refLimitBlockNo    = appDetail[_person].refLimitBlockNo;
        _applicant          = appDetail[_person].applicant;
        
	// (12-2) 열람을 제한할 정보
        if (((msg.sender == _applicant)
            && (_allowReference == true)
            && (block.number < _refLimitBlockNo))
            || (msg.sender == admin)
            || (msg.sender == _person)) {
            _name   = personDetail[_person].name;
            _birth  = personDetail[_person].birth;
            _orglist= personDetail[_person].orglist;
        }
    }
}



account 확인
> eth.accounts

"0xbb0a167d84fcc5d8044c31161ea92a4aacd4acea", 
"0x0e12c08cc865ce75f03d494ba8618c175556f930", 
"0x2c6366f77cb58ac26c8590220453b2ff256f46a8", 
"0xbb21128f26700d8602cebbea5a6a6281a719cc15", 
"0xa784d8889378a2abaaedc21fbb6ae745d30960f2"

account 생성
> personal.newAccount("사용할 패스워드")
> personal.newAccount("pass4")

2) 계약 프로그램 빌드용 Data를 출력한다.
$ solc -o ./ --bin --optimize PersonCertification.sol
$ cat PersonalCertification.bin

3) 계약 정보를 가져온다.
$ solc --abi PersonCertification.sol

4) Geth를 기동한다
콘솔 1에서 실행
$ geth --datadir /Users/jihwan/data_testnet --networkid 15 --minerthreads=1 --etherbase=0xbb0a167d84fcc5d8044c31161ea92a4aacd4acea --rpc --rpcport 8545 --rpcaddr "0.0.0.0" --rpccorsdomain "*" --rpcapi "admin,db,eth,debug,miner,net,shh,txpool,personal,web3"

5) 다른 터미널에서 geth에 attach
콘솔 2에서 실행
$ geth attach rpc:http://localhost:8545 console

6) 계약 등록자 계정의 잠금을 해제한다.
> eth.coinbase
> "0xbb0a167d84fcc5d8044c31161ea92a4aacd4acea"
> personal.unlockAccount(web3.eth.accounts[1])
password : pass1

7) 계약을 블록체인에 등록한다
> PersonCertificationContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"setOrganization","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_person","type":"address"}],"name":"getPerson","outputs":[{"name":"_allowReference","type":"bool"},{"name":"_approveBlockNo","type":"uint256"},{"name":"_refLimitBlockNo","type":"uint256"},{"name":"_applicant","type":"address"},{"name":"_name","type":"string"},{"name":"_birth","type":"string"},{"name":"_orglist","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_birth","type":"string"}],"name":"setPerson","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_person","type":"address"}],"name":"setBelong","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_applicant","type":"address"},{"name":"_span","type":"uint256"}],"name":"setApprove","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"orgDetail","outputs":[{"name":"name","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]); personCert = PersonCertificationContract.new({from: eth.accounts[1], data: '0x6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556108d18061003b6000396000f3006060604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663319c33cc811461007c578063552d2d5c146100cf5780636ebd2bb61461023e5780639447fe8b146102d1578063c4925fea146102f0578063f1c31c6714610312575b600080fd5b341561008757600080fd5b6100cd60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506103b995505050505050565b005b34156100da57600080fd5b6100ee600160a060020a03600435166103e6565b60405187151581526020810187905260408101869052600160a060020a038516606082015260e0608082018181529060a083019060c0840190840187818151815260200191508051906020019080838360005b83811015610159578082015183820152602001610141565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156101bc5780820151838201526020016101a4565b50505050905090810190601f1680156101e95780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b8381101561022257808201518382015260200161020a565b505050509050019a505050505050505050505060405180910390f35b341561024957600080fd5b6100cd60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506106ac95505050505050565b34156102dc57600080fd5b6100cd600160a060020a0360043516610707565b34156102fb57600080fd5b6100cd600160a060020a0360043516602435610768565b341561031d57600080fd5b610331600160a060020a03600435166107c7565b604051602080825282546002600019610100600184161502019091160490820181905281906040820190849080156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b50509250505060405180910390f35b600160a060020a03331660009081526003602052604090208180516103e29291602001906107d8565b5050565b6000806000806103f4610856565b6103fc610856565b610404610856565b600160a060020a038089166000908152600160208190526040909120805491810154600282015460039092015460ff9093169a50985096508116945033168414801561045257506001871515145b801561045d57508443105b80610476575060005433600160a060020a039081169116145b80610492575087600160a060020a031633600160a060020a0316145b156106a1576002600089600160a060020a0316600160a060020a031681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105535780601f1061052857610100808354040283529160200191610553565b820191906000526020600020905b81548152906001019060200180831161053657829003601f168201915b505050505092506002600089600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106165780601f106105eb57610100808354040283529160200191610616565b820191906000526020600020905b8154815290600101906020018083116105f957829003601f168201915b505050505091506002600089600160a060020a0316600160a060020a0316815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561069957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161067b575b505050505090505b919395979092949650565b600160a060020a03331660009081526002602052604090208280516106d59291602001906107d8565b50600160a060020a03331660009081526002602052604090206001018180516107029291602001906107d8565b505050565b600160a060020a0381166000908152600260208190526040909120018054600181016107338382610868565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a031617905550565b33600160a060020a039081166000908152600160208190526040909120805460ff19168217815543918101829055920160028301556003909101805473ffffffffffffffffffffffffffffffffffffffff191692909116919091179055565b600360205260009081526040902081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061081957805160ff1916838001178555610846565b82800160010185558215610846579182015b8281111561084657825182559160200191906001019061082b565b50610852929150610888565b5090565b60206040519081016040526000815290565b815481835581811511610702576000838152602090206107029181019083015b6108a291905b80821115610852576000815560010161088e565b905600a165627a7a723058209251ffaaf81c0cf3f3818fbc0287ad668bc81db9791ff41ddd5e4efb2129eb580029', gas: 3000000}, function(e, contract){console.log(e, contract); if (typeof(contract.address != 'undefined'){console.log('Contract mined! address : ' + contract.address + ' transactionHash : ' + contract.transactionHash); }})




